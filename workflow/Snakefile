from snakemake.utils import min_version

min_version("8.0")


#configfile: "config/config.yaml"
if not config:
    configfile: "config/config.yaml"

include: "rules/common.smk"
include: "rules/vcf2spectrum.smk"


def get_base_sample_name(sample_key):
    """Extract base sample name from sample key (removes signature suffixes)"""
    for suffix in ['_SBS96', '_ID83', '_DBS78']:
        if sample_key.endswith(suffix):
            return sample_key[:-len(suffix)]
    return sample_key

def get_all_outputs():
    outputs = []
    for sample_key, sample_config in config["samples"].items():
        signatures = sample_config.get("signatures", [])
        output_dir = config["output_dir"]
        base_sample = get_base_sample_name(sample_key)
        
        for sig in signatures:
            if sig == "SBS96":
                outputs.extend([
                    f"{output_dir}/{base_sample}_SBS96/{base_sample}.SBS96.all",
                    f"{output_dir}/{base_sample}_SBS96/SBS_96_plots_{base_sample}.pdf",
                    f"{output_dir}/{base_sample}_SBS96/SBS_96_plots_{base_sample}.percentage.pdf"
                ])
                # Add k-mer corrected outputs if kmer parameter is present
                if "kmer" in sample_config:
                    outputs.extend([
                        f"{output_dir}/{base_sample}_SBS96/Kmer_corrected/{base_sample}.SBS96.kmer_corrected.all",
                        f"{output_dir}/{base_sample}_SBS96/Kmer_corrected/SBS_96_plots_{base_sample}.kmer_corrected.pdf",
                        f"{output_dir}/{base_sample}_SBS96/Kmer_corrected/SBS_96_plots_{base_sample}.kmer_corrected.percentage.pdf"
                    ])
                # Add k-mer normalized outputs if kmer_norm parameter is present
                if "kmer_norm" in sample_config:
                    outputs.extend([
                        f"{output_dir}/{base_sample}_SBS96/Kmer_normalization/{base_sample}.SBS96.kmer_normalized.all",
                        f"{output_dir}/{base_sample}_SBS96/Kmer_normalization/SBS_96_plots_{base_sample}.kmer_normalized.pdf",
                        f"{output_dir}/{base_sample}_SBS96/Kmer_normalization/SBS_96_plots_{base_sample}.kmer_normalized.percentage.pdf"
                    ])
            elif sig == "ID83":
                outputs.extend([
                    f"{output_dir}/{base_sample}_ID83/{base_sample}.ID83.all",
                    f"{output_dir}/{base_sample}_ID83/ID_83_plots_{base_sample}.pdf",
                    f"{output_dir}/{base_sample}_ID83/ID_83_plots_{base_sample}.percentage.pdf"
                ])
            elif sig == "DBS78":
                outputs.extend([
                    f"{output_dir}/{base_sample}_DBS78/{base_sample}.DBS78.all",
                    f"{output_dir}/{base_sample}_DBS78/DBS_78_plots_{base_sample}.pdf",
                    f"{output_dir}/{base_sample}_DBS78/DBS_78_plots_{base_sample}.percentage.pdf"
                ])
    return outputs

rule all:
    input:
        get_all_outputs()
